{"ast":null,"code":"// backend/services/cartService.js\nconst Cart = require('../models/Cart');\nconst Book = require('../models/Book'); // Adjust this path if needed\n\nexports.getCartByUserId = async userId => {\n  let cart = await Cart.findOne({\n    userId\n  });\n  if (!cart) {\n    // Create a new cart if none exists for the user\n    cart = await Cart.create({\n      userId,\n      items: []\n    });\n  }\n  return cart;\n};\nexports.addToCart = async (userId, bookId, quantity) => {\n  let cart = await this.getCartByUserId(userId); // Ensure a cart is created if none exists\n\n  const existingItemIndex = cart.items.findIndex(item => item.bookId.toString() === bookId);\n  if (existingItemIndex > -1) {\n    // If book already exists in the cart, update the quantity\n    cart.items[existingItemIndex].quantity += quantity;\n  } else {\n    // Add new item to the cart\n    cart.items.push({\n      bookId,\n      quantity\n    });\n  }\n  await cart.save();\n  return cart;\n};\n\n// Remove from cart\nexports.removeFromCart = async (userId, bookId) => {\n  const cart = await Cart.findOne({\n    user: userId\n  });\n  const bookIndex = cart.items.findIndex(item => item.bookId.toString() === bookId);\n  if (bookIndex === -1) return null;\n  cart.items.splice(bookIndex, 1); // Remove item from cart\n  await cart.save();\n  return cart;\n};\n\n// Clear the cart (for checkout)\nexports.clearCart = async userId => {\n  const cart = await Cart.findOne({\n    user: userId\n  });\n  cart.items = []; // Clear all items\n  await cart.save();\n  return cart;\n};","map":{"version":3,"names":["Cart","require","Book","exports","getCartByUserId","userId","cart","findOne","create","items","addToCart","bookId","quantity","existingItemIndex","findIndex","item","toString","push","save","removeFromCart","user","bookIndex","splice","clearCart"],"sources":["C:/Users/abdulsamia alazazy/Desktop/Construction and Testing Project/E-Commerce website/frontend/src/components/BookDetailsPage.tsx"],"sourcesContent":["// backend/services/cartService.js\r\nconst Cart = require('../models/Cart');\r\nconst Book = require('../models/Book'); // Adjust this path if needed\r\n\r\nexports.getCartByUserId = async (userId) => {\r\n  let cart = await Cart.findOne({ userId });\r\n  if (!cart) {\r\n    // Create a new cart if none exists for the user\r\n    cart = await Cart.create({ userId, items: [] });\r\n  }\r\n  return cart;\r\n};\r\n\r\nexports.addToCart = async (userId, bookId, quantity) => {\r\n  let cart = await this.getCartByUserId(userId); // Ensure a cart is created if none exists\r\n\r\n  const existingItemIndex = cart.items.findIndex(item => item.bookId.toString() === bookId);\r\n  if (existingItemIndex > -1) {\r\n    // If book already exists in the cart, update the quantity\r\n    cart.items[existingItemIndex].quantity += quantity;\r\n  } else {\r\n    // Add new item to the cart\r\n    cart.items.push({ bookId, quantity });\r\n  }\r\n\r\n  await cart.save();\r\n  return cart;\r\n};\r\n\r\n\r\n// Remove from cart\r\nexports.removeFromCart = async (userId, bookId) => {\r\n  const cart = await Cart.findOne({ user: userId });\r\n  const bookIndex = cart.items.findIndex(item => item.bookId.toString() === bookId);\r\n\r\n  if (bookIndex === -1) return null;\r\n\r\n  cart.items.splice(bookIndex, 1);  // Remove item from cart\r\n  await cart.save();\r\n  return cart;\r\n};\r\n\r\n// Clear the cart (for checkout)\r\nexports.clearCart = async (userId) => {\r\n  const cart = await Cart.findOne({ user: userId });\r\n  cart.items = [];  // Clear all items\r\n  await cart.save();\r\n  return cart;\r\n};\r\n"],"mappings":"AAAA;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AACtC,MAAMC,IAAI,GAAGD,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC;;AAExCE,OAAO,CAACC,eAAe,GAAG,MAAOC,MAAM,IAAK;EAC1C,IAAIC,IAAI,GAAG,MAAMN,IAAI,CAACO,OAAO,CAAC;IAAEF;EAAO,CAAC,CAAC;EACzC,IAAI,CAACC,IAAI,EAAE;IACT;IACAA,IAAI,GAAG,MAAMN,IAAI,CAACQ,MAAM,CAAC;MAAEH,MAAM;MAAEI,KAAK,EAAE;IAAG,CAAC,CAAC;EACjD;EACA,OAAOH,IAAI;AACb,CAAC;AAEDH,OAAO,CAACO,SAAS,GAAG,OAAOL,MAAM,EAAEM,MAAM,EAAEC,QAAQ,KAAK;EACtD,IAAIN,IAAI,GAAG,MAAM,IAAI,CAACF,eAAe,CAACC,MAAM,CAAC,CAAC,CAAC;;EAE/C,MAAMQ,iBAAiB,GAAGP,IAAI,CAACG,KAAK,CAACK,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACJ,MAAM,CAACK,QAAQ,CAAC,CAAC,KAAKL,MAAM,CAAC;EACzF,IAAIE,iBAAiB,GAAG,CAAC,CAAC,EAAE;IAC1B;IACAP,IAAI,CAACG,KAAK,CAACI,iBAAiB,CAAC,CAACD,QAAQ,IAAIA,QAAQ;EACpD,CAAC,MAAM;IACL;IACAN,IAAI,CAACG,KAAK,CAACQ,IAAI,CAAC;MAAEN,MAAM;MAAEC;IAAS,CAAC,CAAC;EACvC;EAEA,MAAMN,IAAI,CAACY,IAAI,CAAC,CAAC;EACjB,OAAOZ,IAAI;AACb,CAAC;;AAGD;AACAH,OAAO,CAACgB,cAAc,GAAG,OAAOd,MAAM,EAAEM,MAAM,KAAK;EACjD,MAAML,IAAI,GAAG,MAAMN,IAAI,CAACO,OAAO,CAAC;IAAEa,IAAI,EAAEf;EAAO,CAAC,CAAC;EACjD,MAAMgB,SAAS,GAAGf,IAAI,CAACG,KAAK,CAACK,SAAS,CAACC,IAAI,IAAIA,IAAI,CAACJ,MAAM,CAACK,QAAQ,CAAC,CAAC,KAAKL,MAAM,CAAC;EAEjF,IAAIU,SAAS,KAAK,CAAC,CAAC,EAAE,OAAO,IAAI;EAEjCf,IAAI,CAACG,KAAK,CAACa,MAAM,CAACD,SAAS,EAAE,CAAC,CAAC,CAAC,CAAE;EAClC,MAAMf,IAAI,CAACY,IAAI,CAAC,CAAC;EACjB,OAAOZ,IAAI;AACb,CAAC;;AAED;AACAH,OAAO,CAACoB,SAAS,GAAG,MAAOlB,MAAM,IAAK;EACpC,MAAMC,IAAI,GAAG,MAAMN,IAAI,CAACO,OAAO,CAAC;IAAEa,IAAI,EAAEf;EAAO,CAAC,CAAC;EACjDC,IAAI,CAACG,KAAK,GAAG,EAAE,CAAC,CAAE;EAClB,MAAMH,IAAI,CAACY,IAAI,CAAC,CAAC;EACjB,OAAOZ,IAAI;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}